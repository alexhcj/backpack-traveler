---
import type { EHeader } from "../../../types/header";

import { Image } from "astro:assets";

import InstagramSVG from "../../../../public/svg/instagram.svg";
import TwitterSVG from "../../../../public/svg/twitter.svg";
import FacebookSVG from "../../../../public/svg/facebook.svg";
import PinterestSVG from "../../../../public/svg/pinterest.svg";
import YoutubeSVG from "../../../../public/svg/youtube.svg";

interface Props {
    type: EHeader;
}

const { type } = Astro.props;

const socialsList = [
    { url: "/", icon: InstagramSVG, alt: "Instagram link" },
    { url: "/", icon: TwitterSVG, alt: "Twitter link" },
    { url: "/", icon: FacebookSVG, alt: "Facebook link" },
    { url: "/", icon: PinterestSVG, alt: "Pinterest link" },
    { url: "/", icon: YoutubeSVG, alt: "Youtube link" },
];

interface ISocial {
    url: string;
    icon: ImageMetadata;
    alt: string;
}
---

<div class="right">
    <ul class="socials">
        {
            socialsList.map((social: ISocial) => (
                <li>
                    <a href={social.url}>
                        <Image
                            src={social.icon}
                            width={13}
                            height={13}
                            alt={social.alt}
                        />
                    </a>
                </li>
            ))
        }
    </ul>
    <div class="search">
        <span class="search-divider"></span>
        <input class="search-input" placeholder="Search..." type="text" />
        <button class="search-button">
            <Image
                class="search-magnifier"
                src="/svg/magnifier.svg"
                width={19}
                height={20}
                alt="Search for posts"
            />
        </button>
    </div>
</div>

<style>
    .right {
        display: grid;
        grid-auto-flow: column;
        justify-content: end;
        align-items: center;
        gap: 18px;
    }

    .socials {
        display: grid;
        grid-auto-flow: column;
        gap: 13px;
    }

    .search {
        position: relative;
        display: grid;
        grid-auto-flow: column;
        align-items: center;
    }

    .search-divider {
        position: absolute;
        top: 50%;
        left: 0;
        content: "";
        width: 1px;
        height: 15px;
        background-color: var(--color-grey-2);
        transform: translateY(-50%);
    }

    .search-input {
        padding-left: 7px;
        max-width: 164px;
        width: 0;
        line-height: 43px;
        font-size: 14px;
        color: var(--color-grey-3);
        font-family: var(--family-lora);
        font-weight: 400;
        font-style: italic;
        transition: var(--transition-input);

        &::placeholder {
            color: var(--color-grey-3);
            font-family: var(--family-lora);
        }

        &.active {
            width: 100%;
        }
    }

    .search-button {
        display: flex;
    }

    .search-magnifier {
        margin: 10px 7px;
        transform: scaleX(-1);
        cursor: pointer;
    }
</style>

<script>
    const button = document.querySelector<HTMLButtonElement>(".search-button");
    const searchInput =
        document.querySelector<HTMLInputElement>(".search-input");

    const handleSearchToggle = (e: MouseEvent) => {
        searchInput?.classList.toggle("active");
    };

    const handleOutsideClick = (e: MouseEvent) => {
        if (!searchInput?.classList.contains("active")) return;

        const target = e.target as HTMLElement;
        if (
            !target.closest(".search-button") &&
            !target.closest(".search-input")
        ) {
            searchInput.classList.remove("active");
        }
    };

    const handleSearchClose = (e: KeyboardEvent) => {
        if (e.key === "Escape" || e.key === "Esc") {
            searchInput?.classList.remove("active");
        }
    };

    button?.addEventListener("click", handleSearchToggle);
    document.addEventListener("click", handleOutsideClick);
    document.addEventListener("keyup", handleSearchClose);

    document.addEventListener("astro:before-unmount", () => {
        button?.removeEventListener("click", handleSearchToggle);
        document.removeEventListener("click", handleOutsideClick);
        document.removeEventListener("keyup", handleSearchClose);
    });
</script>
