---
import type { MarkdownInstance } from "astro";
import type { Post } from "../types/post";

interface Props {
    destination: string;
}

const { destination } = Astro.props;

const posts = Object.values(
    import.meta.glob<MarkdownInstance<Post>>("../pages/posts/*.md", {
        eager: true,
    }),
);
const postsLists = posts
    .filter(({ frontmatter }) => frontmatter.country === destination)
    .sort(
        (a, b) =>
            +new Date(b.frontmatter.pubDate) - +new Date(a.frontmatter.pubDate),
    );
---

<div class="grid">
    <div class="grid-sizer"></div>
    <div class="gutter-sizer"></div>
    {
        postsLists.map(
            ({
                frontmatter: {
                    title,
                    image,
                    country,
                    slug,
                    tags,
                    category,
                    description,
                    masonry,
                },
            }) => (
                <article class="grid-item">
                    <a
                        class="img-link"
                        href={`/posts/${slug}`}
                        style={{ height: `${masonry.height ?? 400}px` }}
                    >
                        <img
                            class="img"
                            src={`/${image.url}`}
                            height={`${masonry.height ?? 400}px`}
                            alt={image.alt}
                        />
                    </a>
                    <div class="content">
                        <span class="country">
                            <a href={`/posts/${slug}`}>{country}</a>
                        </span>
                        <h3 class="title">
                            <a href={`/posts/${slug}`}>{title}</a>
                        </h3>
                        <a class="category" href="/">
                            {category}
                        </a>
                        <p class="description">{description}</p>
                    </div>
                </article>
            ),
        )
    }
</div>

<style>
    .grid-item,
    .grid-sizer {
        width: 31.88%;
    }
    .gutter-sizer {
        width: 2.2%;
    }
    .grid-item {
        margin-bottom: 30px;
    }
    .img-link {
        position: relative;
        width: 100%;
        overflow: hidden;

        &::after {
            position: absolute;
            content: "";
            top: 0;
            left: 0;
            display: block;
            width: 100%;
            height: 100%;
            background-color: var(--color-img-hover-overlay);
            opacity: 0;
            z-index: var(--z-index-10);
            transition: var(--transition-default-3);
        }

        &:hover {
            &::after {
                opacity: 1;
            }

            .img {
                scale: var(--img-hover-scale);
            }
        }
    }
    .img {
        display: block;
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: top;
        transition: var(--transition-image);
    }
    .content {
        text-align: center;
        padding: 27px 0 31px;
        border: 1px solid var(--color-border-2);
        border-top: none;
    }
    .country {
        display: inline-block;
        line-height: 1em;
        font-size: 44px;
        font-family: var(--family-epic-ride);
        transition: var(--transition-default);
    }
    .title {
        text-transform: uppercase;
        letter-spacing: var(--letter-spacing-m);
        padding: 5px 12% 0px;
        line-height: 1.57em;
        font-size: 14px;
        font-weight: var(--weight-medium);
        color: var(--color-black);

        & > a {
            display: initial;
        }
    }
    .country,
    .title {
        &:hover {
            color: var(--color-black-0);
        }
    }
    .category {
        text-transform: uppercase;
        letter-spacing: var(--letter-spacing-default);
        margin: 11px 0 30px;
        line-height: 1.8em;
        font-size: 10px;
        color: var(--color-black);
        transition: var(--transition-default);

        &:hover {
            color: var(--color-grey-2);
        }
    }
    .description {
        padding: 0 5%;
        font-family: var(--family-lora);
        color: var(--color-dark);
    }
</style>

<script>
    import Masonry from "masonry-layout";

    var elem = document.querySelector(".grid");
    var msnry = new Masonry(".grid", {
        itemSelector: ".grid-item",
        columnWidth: ".grid-sizer",
        gutter: ".gutter-sizer",
        percentPosition: true,
        horizontalOrder: true,
    });
</script>
