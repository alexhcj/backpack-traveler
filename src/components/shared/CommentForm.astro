---
interface Props {
    parentId?: string;
}

const { parentId } = Astro.props;
---

<div class="box">
    <form class="form" data-parent-id={parentId}>
        <div class="field textarea">
            <textarea
                name="message"
                id="message"
                cols="45"
                rows="6"
                placeholder="Your comment..."></textarea>
        </div>
        <div class="field name">
            <input type="text" name="name" id="name" placeholder="Your name" />
        </div>
        <div class="field email">
            <input
                type="email"
                name="email"
                id="email"
                placeholder="Your email"
            />
        </div>
        <div class="field checkbox">
            <input type="checkbox" name="saveAuthorData" id="saveAuthorData" />
            <label for="saveAuthorData"
                >Save my name and email in this browser for the next time I
                comment.</label
            >
        </div>
        <button class="btn-submit" type="submit">Submit</button>
    </form>
</div>

<style>
    .form {
        display: grid;
        grid-template-areas:
            "comment comment"
            "name email"
            "saveAuthorData saveAuthorData"
            "submit submit";
        grid-template-columns: 1fr 1fr;
        grid-template-rows: auto auto;
        gap: 17px;
    }
    .field {
        textarea,
        input {
            width: 100%;
            padding: 9px 16px;
            line-height: calc(50px - (9px * 2) - 2px);
            font-size: 12px;
            color: var(--color-grey-2);
            border: 1px solid var(--color-dark-3);
            transition: var(--transition-default-4);

            &:not(:placeholder-shown) {
                color: var(--color-dark-4);
            }

            &:focus {
                color: var(--color-black);
                border-color: var(--color-dark);
            }

            &::placeholder {
                font-style: italic;
            }
        }

        input {
            &::placeholder {
                text-transform: capitalize;
            }
        }

        &.textarea {
            grid-area: comment;

            textarea {
                resize: vertical;
                min-height: 200px;
                transition: border-color var(--transition-default-4) color
                    var(--transition-default-4);
            }
        }

        &.name {
            grid-area: name;
        }

        &.email {
            grid-area: email;
        }

        &.checkbox {
            grid-area: saveAuthorData;
            display: flex;
            align-items: baseline;

            label {
                font-size: 12px;
                font-family: var(--family-lora);
                color: var(--color-dark);
            }

            input {
                margin: 3px 3px 3px 4px;
                padding: 0;
                width: 13px;
                height: 13px;
                border-radius: 2px;
                border-color: var(--color-dark);
                cursor: pointer;

                &:hover {
                    border-color: var(--color-black);
                }

                &:checked {
                    border-color: var(--color-dark);
                    background-color: var(--color-dark);
                }
            }
        }
    }
    .btn-submit {
        grid-area: submit;
        display: inline-flex;
        margin-top: 2px;
        padding: 9px 41px 10px;
        width: fit-content;
        text-transform: uppercase;
        letter-spacing: var(--letter-spacing-m);
        line-height: 2em;
        font-size: 12px;
        color: var(--color-white);
        background-color: var(--color-black);
        cursor: pointer;
        transition: var(--transition-default-4);

        &:hover {
            background-color: var(--color-dark-4);
        }
    }
</style>

<script>
    // Auto-fill form with saved author data from localStorage
    function loadAndFillAuthorData() {
        try {
            const savedData = localStorage.getItem("comment-author-data");
            if (savedData) {
                const authorData = JSON.parse(savedData);

                // Find all comment forms on the page
                const forms = document.querySelectorAll(".form");

                forms.forEach((form) => {
                    const nameInput = form.querySelector(
                        'input[name="name"]',
                    ) as HTMLInputElement;
                    const emailInput = form.querySelector(
                        'input[name="email"]',
                    ) as HTMLInputElement;
                    const saveDataCheckbox = form.querySelector(
                        'input[name="saveAuthorData"]',
                    ) as HTMLInputElement;

                    // Only fill if inputs are empty
                    if (nameInput && !nameInput.value && authorData.name) {
                        nameInput.value = authorData.name;
                    }
                    if (emailInput && !emailInput.value && authorData.email) {
                        emailInput.value = authorData.email;
                    }
                    if (saveDataCheckbox) {
                        saveDataCheckbox.checked = true;
                    }
                });
            }
        } catch (error) {
            console.error("Error loading saved author data:", error);
        }
    }

    // Run on DOM load
    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", loadAndFillAuthorData);
    } else {
        // DOM already loaded
        loadAndFillAuthorData();
    }
</script>
